version: '2.1'

services:
  rabbitmq:
    image: rabbitmq:3.11.0
    container_name: microservice-rabbitmq
    restart: always
    networks:
      - mynetwork
    ports:
      - 5672:5672
    expose:
      - 5672

  zipkin:
    image: openzipkin/zipkin
    container_name: microservice-zipkin
    restart: always
    networks:
      - mynetwork
    ports:
      - 9411:9411
    expose:
      - 9411

  mysql:
    image: mysql:8
    container_name: microservice-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: sudeep
      MYSQL_DATABASE: department_db
    volumes:
      - ./init:/docker-entrypoint-initdb.d
    networks:
      - mynetwork
    ports:
       - 3306:3306
    expose:
      - 3306



  service-registry-service:
    build:
      context: .
      dockerfile: Dockerfile-service-registry
    networks:
      - mynetwork
    restart: on-failure
    ports:
      - 8761:8761
    expose:
      - 8761

  config-server-service:
    build:
      context: .
      dockerfile: Dockerfile-config-server
    networks:
      - mynetwork
    restart: on-failure
    ports:
      - 8888:8888
    expose:
      - 8888





  api-gateway-service:
    build:
      context: .
      dockerfile: Dockerfile-api-gateway
    container_name: api
    networks:
      - mynetwork
    restart: on-failure
    ports:
      - 9191:9191
    expose:
      - 9191



  department-service:
    build:
      context: .
      dockerfile: Dockerfile-department-service
    networks:
      - mynetwork
    restart: on-failure
    ports:
      - 8080:8080
    expose:
      - 8080

  employee-service:
    build:
      context: .
      dockerfile: Dockerfile-employee-service
    networks:
      - mynetwork
    restart: on-failure
    ports:
      - 8081:8081
    expose:
      - 8081

  organization-service:
    build:
      context: .
      dockerfile: Dockerfile-organization-service
    networks:
      - mynetwork
    restart: on-failure
    ports:
      - 8083:8083
    expose:
      - 8083
  react-frontend-service:
    build:
      context: .
      dockerfile: Dockerfile-react-frontend
    container_name: ui
    networks:
      mynetwork:
        # aliases:
        #   - ui
    restart: on-failure
    ports:
      - "3001:3001"
    expose:
      - 3001

  # firefox:
  #   image: lscr.io/linuxserver/firefox:latest
  #   container_name: firefox
  #   security_opt:
  #     - seccomp:unconfined #optional
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=Etc/UTC
      
  #   volumes:
  #     - ./config:/config
  #     # - ./user.js:/config/profile/user.js
  #   ports:
  #     - 3000:3000
  #   restart: unless-stopped
  #   networks:
  #    - mynetwork    

networks:
  mynetwork:
    driver: bridge
